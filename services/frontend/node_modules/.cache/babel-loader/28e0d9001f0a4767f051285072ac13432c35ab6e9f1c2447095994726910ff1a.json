{"ast":null,"code":"export default {\n  name: 'UserInfo',\n  props: {\n    // Информация о пользователе из Telegram WebApp\n    userInfo: {\n      type: Object,\n      required: true\n    },\n    // Дата рождения пользователя\n    birthday: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      // Оставшееся время до дня рождения\n      timeLeft: {\n        days: 0,\n        hours: 0,\n        minutes: 0\n      },\n      // Таймер для обновления обратного отсчета\n      timer: null,\n      // Флаг, указывающий, что идет процесс отправки данных\n      isSharing: false,\n      // Данные, полученные при шаринге (если есть)\n      sharedData: null\n    };\n  },\n  computed: {\n    // Проверка валидности данных пользователя\n    isValidUserInfo() {\n      return this.userInfo && typeof this.userInfo === 'object' && 'first_name' in this.userInfo;\n    },\n    // Определение даты рождения в зависимости от режима (обычный или шаринг)\n    currentBirthday() {\n      return this.sharedData ? this.sharedData.share.birthday : this.birthday;\n    },\n    // Определение информации о пользователе в зависимости от режима\n    displayUserInfo() {\n      return this.sharedData ? this.sharedData.user : this.userInfo;\n    }\n  },\n  methods: {\n    /**\n     * Рассчитывает оставшееся время до дня рождения\n     * Устанавливает дни, часы и минуты в объект timeLeft\n     */\n    calculateTimeLeft() {\n      try {\n        const now = new Date();\n        const birthDate = new Date(this.currentBirthday);\n\n        // Создаем дату следующего дня рождения в текущем году\n        const nextBirthday = new Date(now.getFullYear(), birthDate.getMonth(), birthDate.getDate());\n\n        // Если день рождения в этом году уже прошел, берем следующий год\n        if (nextBirthday < now) {\n          nextBirthday.setFullYear(now.getFullYear() + 1);\n        }\n\n        // Рассчитываем разницу во времени\n        const diff = nextBirthday - now;\n\n        // Обновляем данные для отображения\n        this.timeLeft = {\n          days: Math.floor(diff / (1000 * 60 * 60 * 24)),\n          hours: Math.floor(diff % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)),\n          minutes: Math.floor(diff % (1000 * 60 * 60) / (1000 * 60))\n        };\n      } catch (error) {\n        // В случае ошибки устанавливаем нули\n        this.timeLeft = {\n          days: 0,\n          hours: 0,\n          minutes: 0\n        };\n      }\n    },\n    /**\n     * Загружает данные по идентификатору шаринга\n     * @param {string} shareId - Идентификатор шаринга\n     */\n    async loadSharedData(shareId) {\n      try {\n        const response = await fetch(`/api/share/${shareId}`);\n        if (!response.ok) {\n          throw new Error('Не удалось загрузить данные');\n        }\n        this.sharedData = await response.json();\n      } catch (error) {\n        console.error('Error loading shared data:', error);\n        this.sharedData = null;\n      }\n    },\n    /**\n     * Отправляет данные пользователя на сервер для шаринга\n     * Использует Telegram WebApp API для отображения прогресса и уведомлений\n     */\n    async shareInfo() {\n      // Проверяем доступность Telegram WebApp\n      if (!window.Telegram?.WebApp) {\n        return;\n      }\n      const tg = window.Telegram.WebApp;\n      this.isSharing = true;\n      try {\n        // Показываем индикатор прогресса на кнопке\n        tg.MainButton.showProgress();\n        tg.MainButton.setText('Отправка...');\n\n        // Генерируем уникальный идентификатор для шаринга\n        const shareId = Math.random().toString(36).substring(2, 15);\n        const chatId = tg.initDataUnsafe?.user?.id;\n        if (!chatId) {\n          throw new Error('Не удалось получить ID пользователя');\n        }\n\n        // Подготавливаем данные для отправки\n        const shareData = {\n          shareId: shareId,\n          data: {\n            birthday: this.birthday\n          },\n          chatId: chatId,\n          userInfo: tg.initDataUnsafe.user\n        };\n\n        // Отправляем запрос на сервер\n        const response = await fetch('/api/share', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify(shareData)\n        }).catch(error => {\n          throw new Error(`Ошибка сети: ${error.message}`);\n        });\n\n        // Проверяем успешность запроса\n        if (!response.ok) {\n          const errorData = await response.text();\n          throw new Error(`Ошибка сервера (${response.status}): ${errorData}`);\n        }\n\n        // Скрываем индикатор прогресса\n        tg.MainButton.hideProgress();\n\n        // Показываем уведомление об успехе\n        tg.showPopup({\n          title: 'Успех',\n          message: 'Данные успешно отправлены. Ссылка для шаринга отправлена в чат.',\n          buttons: [{\n            type: 'close'\n          }]\n        });\n\n        // Закрываем приложение после успешной отправки\n        setTimeout(() => {\n          tg.close();\n        }, 3000);\n      } catch (error) {\n        // Обработка ошибки\n        tg.MainButton.hideProgress();\n        tg.MainButton.setText('Поделиться');\n\n        // Показываем уведомление об ошибке\n        tg.showPopup({\n          title: 'Ошибка',\n          message: error.message || 'Не удалось отправить данные',\n          buttons: [{\n            type: 'close'\n          }]\n        });\n      } finally {\n        this.isSharing = false;\n      }\n    }\n  },\n  async mounted() {\n    // Инициализация таймера для обратного отсчета\n    this.calculateTimeLeft();\n    this.timer = setInterval(this.calculateTimeLeft, 60000);\n\n    // Настраиваем кнопку \"Поделиться\" только если не в режиме шаринга\n    if (!this.sharedData && window.Telegram?.WebApp) {\n      const tg = window.Telegram.WebApp;\n      tg.MainButton.setText('Поделиться');\n      tg.MainButton.show();\n      tg.MainButton.onClick(() => this.shareInfo());\n    }\n  },\n  beforeDestroy() {\n    // Очищаем таймер при уничтожении компонента\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n\n    // Скрываем кнопку при уничтожении компонента\n    if (window.Telegram?.WebApp) {\n      window.Telegram.WebApp.MainButton.hide();\n    }\n  }\n};","map":{"version":3,"names":["name","props","userInfo","type","Object","required","birthday","String","data","timeLeft","days","hours","minutes","timer","isSharing","sharedData","computed","isValidUserInfo","currentBirthday","share","displayUserInfo","user","methods","calculateTimeLeft","now","Date","birthDate","nextBirthday","getFullYear","getMonth","getDate","setFullYear","diff","Math","floor","error","loadSharedData","shareId","response","fetch","ok","Error","json","console","shareInfo","window","Telegram","WebApp","tg","MainButton","showProgress","setText","random","toString","substring","chatId","initDataUnsafe","id","shareData","method","headers","body","JSON","stringify","catch","message","errorData","text","status","hideProgress","showPopup","title","buttons","setTimeout","close","mounted","setInterval","show","onClick","beforeDestroy","clearInterval","hide"],"sources":["/Users/wiquzix/Desktop/tzrobita/src/components/UserInfo.vue"],"sourcesContent":["<!-- \n  Компонент UserInfo отображает информацию о пользователе и обратный отсчет до дня рождения.\n  Поддерживает два режима:\n  1. Обычный режим - показывает информацию о текущем пользователе\n  2. Режим шаринга - показывает информацию о пользователе, который поделился данными\n-->\n<template>\n  <div class=\"user-info\">\n    <!-- Сообщение об ошибке, если данные пользователя недоступны -->\n    <div v-if=\"!isValidUserInfo && !sharedData\" class=\"error-message\">\n      Ошибка: данные пользователя недоступны\n    </div>\n    \n    <!-- Основной блок с информацией о пользователе -->\n    <div v-else class=\"user-details\" :class=\"{ 'shared-info': sharedData }\">\n      <h2>{{ sharedData ? 'Информация от пользователя' : 'Информация о пользователе' }}</h2>\n      \n      <!-- Информация о пользователе -->\n      <div class=\"info-item\">\n        <span class=\"label\">Имя:</span>\n        <span class=\"value\">{{ displayUserInfo.first_name }}</span>\n      </div>\n      <div class=\"info-item\" v-if=\"displayUserInfo.last_name\">\n        <span class=\"label\">Фамилия:</span>\n        <span class=\"value\">{{ displayUserInfo.last_name }}</span>\n      </div>\n      <div class=\"info-item\" v-if=\"displayUserInfo.username\">\n        <span class=\"label\">Username:</span>\n        <span class=\"value\">@{{ displayUserInfo.username }}</span>\n      </div>\n      \n      <!-- Обратный отсчет до дня рождения -->\n      <div class=\"birthday-countdown\">\n        <h3>До дня рождения осталось:</h3>\n        <div class=\"countdown-values\">\n          <div class=\"countdown-item\">\n            <span class=\"count\">{{ timeLeft.days }}</span>\n            <span class=\"unit\">дней</span>\n          </div>\n          <div class=\"countdown-item\">\n            <span class=\"count\">{{ timeLeft.hours }}</span>\n            <span class=\"unit\">часов</span>\n          </div>\n          <div class=\"countdown-item\">\n            <span class=\"count\">{{ timeLeft.minutes }}</span>\n            <span class=\"unit\">минут</span>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Индикатор отправки -->\n      <div v-if=\"isSharing\" class=\"sending-indicator\">\n        <div class=\"spinner\"></div>\n        <span>{{ sendingStatus }}</span>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'UserInfo',\n  props: {\n    // Информация о пользователе из Telegram WebApp\n    userInfo: {\n      type: Object,\n      required: true\n    },\n    // Дата рождения пользователя\n    birthday: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      // Оставшееся время до дня рождения\n      timeLeft: {\n        days: 0,\n        hours: 0,\n        minutes: 0\n      },\n      // Таймер для обновления обратного отсчета\n      timer: null,\n      // Флаг, указывающий, что идет процесс отправки данных\n      isSharing: false,\n      // Данные, полученные при шаринге (если есть)\n      sharedData: null\n    }\n  },\n  computed: {\n    // Проверка валидности данных пользователя\n    isValidUserInfo() {\n      return this.userInfo && typeof this.userInfo === 'object' && 'first_name' in this.userInfo;\n    },\n    // Определение даты рождения в зависимости от режима (обычный или шаринг)\n    currentBirthday() {\n      return this.sharedData ? this.sharedData.share.birthday : this.birthday;\n    },\n    // Определение информации о пользователе в зависимости от режима\n    displayUserInfo() {\n      return this.sharedData ? this.sharedData.user : this.userInfo;\n    }\n  },\n  methods: {\n    /**\n     * Рассчитывает оставшееся время до дня рождения\n     * Устанавливает дни, часы и минуты в объект timeLeft\n     */\n    calculateTimeLeft() {\n      try {\n        const now = new Date()\n        const birthDate = new Date(this.currentBirthday)\n        \n        // Создаем дату следующего дня рождения в текущем году\n        const nextBirthday = new Date(now.getFullYear(), birthDate.getMonth(), birthDate.getDate())\n        \n        // Если день рождения в этом году уже прошел, берем следующий год\n        if (nextBirthday < now) {\n          nextBirthday.setFullYear(now.getFullYear() + 1)\n        }\n        \n        // Рассчитываем разницу во времени\n        const diff = nextBirthday - now\n        \n        // Обновляем данные для отображения\n        this.timeLeft = {\n          days: Math.floor(diff / (1000 * 60 * 60 * 24)),\n          hours: Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n          minutes: Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60))\n        }\n      } catch (error) {\n        // В случае ошибки устанавливаем нули\n        this.timeLeft = { days: 0, hours: 0, minutes: 0 };\n      }\n    },\n    \n    /**\n     * Загружает данные по идентификатору шаринга\n     * @param {string} shareId - Идентификатор шаринга\n     */\n    async loadSharedData(shareId) {\n      try {\n        const response = await fetch(`/api/share/${shareId}`);\n        if (!response.ok) {\n          throw new Error('Не удалось загрузить данные');\n        }\n        this.sharedData = await response.json();\n      } catch (error) {\n        console.error('Error loading shared data:', error);\n        this.sharedData = null;\n      }\n    },\n    \n    /**\n     * Отправляет данные пользователя на сервер для шаринга\n     * Использует Telegram WebApp API для отображения прогресса и уведомлений\n     */\n    async shareInfo() {\n      // Проверяем доступность Telegram WebApp\n      if (!window.Telegram?.WebApp) {\n        return;\n      }\n\n      const tg = window.Telegram.WebApp;\n      this.isSharing = true;\n\n      try {\n        // Показываем индикатор прогресса на кнопке\n        tg.MainButton.showProgress();\n        tg.MainButton.setText('Отправка...');\n\n        // Генерируем уникальный идентификатор для шаринга\n        const shareId = Math.random().toString(36).substring(2, 15);\n        const chatId = tg.initDataUnsafe?.user?.id;\n\n        if (!chatId) {\n          throw new Error('Не удалось получить ID пользователя');\n        }\n\n        // Подготавливаем данные для отправки\n        const shareData = {\n          shareId: shareId,\n          data: {\n            birthday: this.birthday\n          },\n          chatId: chatId,\n          userInfo: tg.initDataUnsafe.user\n        };\n\n        // Отправляем запрос на сервер\n        const response = await fetch('/api/share', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify(shareData)\n        }).catch(error => {\n          throw new Error(`Ошибка сети: ${error.message}`);\n        });\n\n        // Проверяем успешность запроса\n        if (!response.ok) {\n          const errorData = await response.text();\n          throw new Error(`Ошибка сервера (${response.status}): ${errorData}`);\n        }\n\n        // Скрываем индикатор прогресса\n        tg.MainButton.hideProgress();\n        \n        // Показываем уведомление об успехе\n        tg.showPopup({\n          title: 'Успех',\n          message: 'Данные успешно отправлены. Ссылка для шаринга отправлена в чат.',\n          buttons: [{type: 'close'}]\n        });\n\n        // Закрываем приложение после успешной отправки\n        setTimeout(() => {\n          tg.close();\n        }, 3000);\n\n      } catch (error) {\n        // Обработка ошибки\n        tg.MainButton.hideProgress();\n        tg.MainButton.setText('Поделиться');\n        \n        // Показываем уведомление об ошибке\n        tg.showPopup({\n          title: 'Ошибка',\n          message: error.message || 'Не удалось отправить данные',\n          buttons: [{type: 'close'}]\n        });\n      } finally {\n        this.isSharing = false;\n      }\n    }\n  },\n  async mounted() {\n    // Инициализация таймера для обратного отсчета\n    this.calculateTimeLeft();\n    this.timer = setInterval(this.calculateTimeLeft, 60000);\n    \n    // Настраиваем кнопку \"Поделиться\" только если не в режиме шаринга\n    if (!this.sharedData && window.Telegram?.WebApp) {\n      const tg = window.Telegram.WebApp;\n      tg.MainButton.setText('Поделиться');\n      tg.MainButton.show();\n      tg.MainButton.onClick(() => this.shareInfo());\n    }\n  },\n  beforeDestroy() {\n    // Очищаем таймер при уничтожении компонента\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n    \n    // Скрываем кнопку при уничтожении компонента\n    if (window.Telegram?.WebApp) {\n      window.Telegram.WebApp.MainButton.hide();\n    }\n  }\n}\n</script>\n\n<style scoped>\n/* Основной контейнер */\n.user-info {\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n/* Блок с информацией о пользователе */\n.user-details {\n  background-color: var(--tg-theme-secondary-bg-color, rgba(255, 255, 255, 0.08));\n  padding: 20px;\n  border-radius: 12px;\n}\n\n/* Стиль для режима шаринга */\n.shared-info {\n  border: 2px solid var(--tg-theme-button-color, #3390ec);\n}\n\n/* Сообщение об ошибке */\n.error-message {\n  color: var(--tg-theme-destructive-text-color, #ff3b30);\n  text-align: center;\n  padding: 20px;\n  background-color: var(--tg-theme-secondary-bg-color, rgba(255, 255, 255, 0.08));\n  border-radius: 8px;\n  font-size: 14px;\n  max-width: 100%;\n}\n\n/* Элемент информации о пользователе */\n.info-item {\n  margin: 10px 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n/* Метка поля */\n.label {\n  color: var(--tg-theme-hint-color, #999);\n}\n\n/* Значение поля */\n.value {\n  font-weight: bold;\n}\n\n/* Блок обратного отсчета */\n.birthday-countdown {\n  margin-top: 20px;\n  text-align: center;\n}\n\n/* Контейнер для значений обратного отсчета */\n.countdown-values {\n  display: flex;\n  justify-content: center;\n  gap: 20px;\n  margin-top: 10px;\n}\n\n/* Элемент обратного отсчета */\n.countdown-item {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n/* Числовое значение обратного отсчета */\n.count {\n  font-size: 24px;\n  font-weight: bold;\n  color: var(--tg-theme-button-color, #3390ec);\n}\n\n/* Единица измерения обратного отсчета */\n.unit {\n  font-size: 12px;\n  color: var(--tg-theme-hint-color, #999);\n}\n\n.telegram-button {\n  background-color: var(--tg-theme-button-color, #2481cc);\n  color: var(--tg-theme-button-text-color, #ffffff);\n  border: none;\n  padding: 12px 24px;\n  border-radius: 8px;\n  font-size: 16px;\n  cursor: pointer;\n  width: 100%;\n  transition: all 0.3s ease;\n}\n\n.telegram-button:active {\n  transform: scale(0.98);\n  opacity: 0.9;\n}\n\n.telegram-button:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n  transform: none;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}