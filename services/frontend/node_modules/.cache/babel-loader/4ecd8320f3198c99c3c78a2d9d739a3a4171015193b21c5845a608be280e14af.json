{"ast":null,"code":"import BirthdayForm from './components/BirthdayForm.vue';\nimport UserInfo from './components/UserInfo.vue';\nexport default {\n  name: 'App',\n  components: {\n    BirthdayForm,\n    UserInfo\n  },\n  data() {\n    return {\n      // Информация о пользователе\n      userInfo: {},\n      // Дата рождения пользователя\n      birthday: '',\n      // Флаг, указывающий, что дата рождения установлена\n      birthdaySet: false,\n      // Флаг загрузки\n      loading: true,\n      // Сообщение об ошибке\n      error: null,\n      // Флаг режима шаринга\n      sharedMode: false,\n      // Цвет фона из Telegram WebApp\n      backgroundColor: '#ffffff',\n      // Флаг доступности Telegram WebApp\n      isValidWebApp: false,\n      // Объект Telegram WebApp\n      tg: null\n    };\n  },\n  methods: {\n    /**\n     * Устанавливает дату рождения пользователя\n     * @param {string} date - Дата рождения в формате YYYY-MM-DD\n     */\n    setBirthday(date) {\n      this.birthday = date;\n      this.birthdaySet = true;\n    },\n    /**\n     * Проверяет наличие параметра share_id в URL или в start_param\n     * Если параметр найден, загружает данные с сервера\n     */\n    async checkForSharedData() {\n      // Проверяем наличие параметра share_id в URL или в startapp\n      const tg = window.Telegram?.WebApp;\n      let shareId = null;\n\n      // Проверяем start_param из Telegram WebApp\n      if (tg?.initDataUnsafe?.start_param) {\n        const startParam = tg.initDataUnsafe.start_param;\n        if (startParam.startsWith('share_')) {\n          shareId = startParam.substring(6);\n        }\n      } else {\n        // Проверяем URL параметры (для тестирования)\n        const urlParams = new URLSearchParams(window.location.search);\n        shareId = urlParams.get('share_id');\n      }\n\n      // Дополнительная проверка для startapp в URL\n      if (!shareId && window.location.href.includes('startapp=')) {\n        const match = window.location.href.match(/startapp=share_([^&]+)/);\n        if (match && match[1]) {\n          shareId = match[1];\n        }\n      }\n\n      // Если найден shareId, загружаем данные\n      if (shareId) {\n        try {\n          const response = await fetch(`/api/share/${shareId}`);\n          if (!response.ok) {\n            throw new Error('Не удалось загрузить данные');\n          }\n          const data = await response.json();\n\n          // Устанавливаем данные из шаринга\n          this.userInfo = data.user;\n          this.birthday = data.share.birthday;\n          this.birthdaySet = true;\n          this.sharedMode = true;\n        } catch (error) {\n          this.error = `Ошибка: ${error.message}`;\n        }\n      }\n    }\n  },\n  async mounted() {\n    try {\n      // Инициализация Telegram WebApp\n      const tg = window.Telegram?.WebApp;\n      if (tg) {\n        this.tg = tg;\n        this.isValidWebApp = true;\n\n        // Инициализация Telegram Web App\n        tg.ready();\n        tg.expand();\n\n        // Используем цвет темы из Telegram\n        this.backgroundColor = tg.backgroundColor || '#ffffff';\n      }\n\n      // Проверяем наличие данных из шаринга\n      await this.checkForSharedData();\n\n      // Если не в режиме шаринга, получаем данные пользователя из Telegram\n      if (!this.sharedMode) {\n        if (tg) {\n          this.userInfo = tg.initDataUnsafe?.user || {};\n        } else {\n          // Для тестирования без Telegram\n          this.userInfo = {\n            first_name: 'Тестовый',\n            last_name: 'Пользователь',\n            username: 'test_user'\n          };\n        }\n      }\n\n      // Завершаем загрузку\n      this.loading = false;\n    } catch (error) {\n      this.error = `Ошибка: ${error.message}`;\n      this.loading = false;\n    }\n  }\n};","map":{"version":3,"names":["BirthdayForm","UserInfo","name","components","data","userInfo","birthday","birthdaySet","loading","error","sharedMode","backgroundColor","isValidWebApp","tg","methods","setBirthday","date","checkForSharedData","window","Telegram","WebApp","shareId","initDataUnsafe","start_param","startParam","startsWith","substring","urlParams","URLSearchParams","location","search","get","href","includes","match","response","fetch","ok","Error","json","user","share","message","mounted","ready","expand","first_name","last_name","username"],"sources":["/Users/wiquzix/Desktop/tzrobita/services/frontend/src/App.vue"],"sourcesContent":["<!-- \n  Главный компонент приложения, который управляет состоянием и отображением.\n  Поддерживает два основных режима:\n  1. Ввод даты рождения (BirthdayForm)\n  2. Отображение информации о пользователе (UserInfo)\n  \n  Также поддерживает режим шаринга, когда пользователь открывает приложение по ссылке.\n-->\n<template>\n  <div id=\"app\" :style=\"{ backgroundColor: backgroundColor }\">\n    <!-- Индикатор загрузки -->\n    <div v-if=\"loading\" class=\"loading\">\n      Загрузка...\n    </div>\n    \n    <!-- Сообщение об ошибке -->\n    <div v-else-if=\"error\" class=\"error\">\n      {{ error }}\n    </div>\n    \n    <!-- Режим шаринга - показываем информацию о пользователе, который поделился данными -->\n    <div v-else-if=\"sharedMode\" class=\"shared-mode\">\n      <UserInfo :userInfo=\"userInfo\" :birthday=\"birthday\" />\n    </div>\n    \n    <!-- Режим ввода даты рождения -->\n    <div v-else-if=\"!birthdaySet\">\n      <BirthdayForm @submit=\"setBirthday\" />\n    </div>\n    \n    <!-- Обычный режим - показываем информацию о текущем пользователе -->\n    <div v-else>\n      <UserInfo :userInfo=\"userInfo\" :birthday=\"birthday\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport BirthdayForm from './components/BirthdayForm.vue'\nimport UserInfo from './components/UserInfo.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    BirthdayForm,\n    UserInfo\n  },\n  data() {\n    return {\n      // Информация о пользователе\n      userInfo: {},\n      // Дата рождения пользователя\n      birthday: '',\n      // Флаг, указывающий, что дата рождения установлена\n      birthdaySet: false,\n      // Флаг загрузки\n      loading: true,\n      // Сообщение об ошибке\n      error: null,\n      // Флаг режима шаринга\n      sharedMode: false,\n      // Цвет фона из Telegram WebApp\n      backgroundColor: '#ffffff',\n      // Флаг доступности Telegram WebApp\n      isValidWebApp: false,\n      // Объект Telegram WebApp\n      tg: null\n    }\n  },\n  methods: {\n    /**\n     * Устанавливает дату рождения пользователя\n     * @param {string} date - Дата рождения в формате YYYY-MM-DD\n     */\n    setBirthday(date) {\n      this.birthday = date;\n      this.birthdaySet = true;\n    },\n    \n    /**\n     * Проверяет наличие параметра share_id в URL или в start_param\n     * Если параметр найден, загружает данные с сервера\n     */\n    async checkForSharedData() {\n      // Проверяем наличие параметра share_id в URL или в startapp\n      const tg = window.Telegram?.WebApp;\n      let shareId = null;\n      \n      // Проверяем start_param из Telegram WebApp\n      if (tg?.initDataUnsafe?.start_param) {\n        const startParam = tg.initDataUnsafe.start_param;\n        \n        if (startParam.startsWith('share_')) {\n          shareId = startParam.substring(6);\n        }\n      } else {\n        // Проверяем URL параметры (для тестирования)\n        const urlParams = new URLSearchParams(window.location.search);\n        shareId = urlParams.get('share_id');\n      }\n      \n      // Дополнительная проверка для startapp в URL\n      if (!shareId && window.location.href.includes('startapp=')) {\n        const match = window.location.href.match(/startapp=share_([^&]+)/);\n        if (match && match[1]) {\n          shareId = match[1];\n        }\n      }\n      \n      // Если найден shareId, загружаем данные\n      if (shareId) {\n        try {\n          const response = await fetch(`/api/share/${shareId}`);\n          if (!response.ok) {\n            throw new Error('Не удалось загрузить данные');\n          }\n          \n          const data = await response.json();\n          \n          // Устанавливаем данные из шаринга\n          this.userInfo = data.user;\n          this.birthday = data.share.birthday;\n          this.birthdaySet = true;\n          this.sharedMode = true;\n        } catch (error) {\n          this.error = `Ошибка: ${error.message}`;\n        }\n      }\n    }\n  },\n  async mounted() {\n    try {\n      // Инициализация Telegram WebApp\n      const tg = window.Telegram?.WebApp;\n      if (tg) {\n        this.tg = tg;\n        this.isValidWebApp = true;\n        \n        // Инициализация Telegram Web App\n        tg.ready();\n        tg.expand();\n        \n        // Используем цвет темы из Telegram\n        this.backgroundColor = tg.backgroundColor || '#ffffff';\n      }\n      \n      // Проверяем наличие данных из шаринга\n      await this.checkForSharedData();\n      \n      // Если не в режиме шаринга, получаем данные пользователя из Telegram\n      if (!this.sharedMode) {\n        if (tg) {\n          this.userInfo = tg.initDataUnsafe?.user || {};\n        } else {\n          // Для тестирования без Telegram\n          this.userInfo = {\n            first_name: 'Тестовый',\n            last_name: 'Пользователь',\n            username: 'test_user'\n          };\n        }\n      }\n      \n      // Завершаем загрузку\n      this.loading = false;\n    } catch (error) {\n      this.error = `Ошибка: ${error.message}`;\n      this.loading = false;\n    }\n  }\n}\n</script>\n\n<style>\n/* Основной контейнер приложения */\n#app {\n  font-family: 'Roboto', sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: var(--tg-theme-text-color, #000000);\n  background-color: var(--tg-theme-bg-color, #ffffff);\n  min-height: 100vh;\n  padding: 16px;\n}\n\n/* Индикатор загрузки и сообщение об ошибке */\n.loading, .error {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  text-align: center;\n  padding: 20px;\n}\n\n/* Сообщение об ошибке */\n.error {\n  color: var(--tg-theme-destructive-text-color, #ff3b30);\n}\n\n/* Контейнер для режима шаринга */\n.shared-mode {\n  padding: 10px;\n}\n\n/* Заголовки */\nh2 {\n  color: var(--tg-theme-text-color, #000000);\n  text-align: center;\n  margin-bottom: 20px;\n}\n</style>\n  \n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}