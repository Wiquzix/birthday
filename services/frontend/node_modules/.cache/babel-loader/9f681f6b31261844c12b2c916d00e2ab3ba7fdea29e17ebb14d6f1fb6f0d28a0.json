{"ast":null,"code":"export default {\n  name: 'UserInfo',\n  props: {\n    userInfo: {\n      type: Object,\n      required: true\n    },\n    birthday: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      timeLeft: {\n        days: 0,\n        hours: 0,\n        minutes: 0\n      },\n      timer: null,\n      isSharing: false\n    };\n  },\n  computed: {\n    isValidUserInfo() {\n      return this.userInfo && typeof this.userInfo === 'object' && 'first_name' in this.userInfo;\n    }\n  },\n  methods: {\n    calculateTimeLeft() {\n      try {\n        const now = new Date();\n        const birthDate = new Date(this.birthday);\n        const nextBirthday = new Date(now.getFullYear(), birthDate.getMonth(), birthDate.getDate());\n        if (nextBirthday < now) {\n          nextBirthday.setFullYear(now.getFullYear() + 1);\n        }\n        const diff = nextBirthday - now;\n        this.timeLeft = {\n          days: Math.floor(diff / (1000 * 60 * 60 * 24)),\n          hours: Math.floor(diff % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)),\n          minutes: Math.floor(diff % (1000 * 60 * 60) / (1000 * 60))\n        };\n      } catch (error) {\n        console.error('Error calculating time left:', error);\n        this.timeLeft = {\n          days: 0,\n          hours: 0,\n          minutes: 0\n        };\n      }\n    },\n    async shareInfo() {\n      if (!window.Telegram?.WebApp) {\n        console.error('Telegram WebApp не доступен');\n        return;\n      }\n      const tg = window.Telegram.WebApp;\n      this.isSharing = true;\n      try {\n        // Проверяем initData\n        console.log('InitData:', tg.initData);\n        console.log('InitDataUnsafe:', tg.initDataUnsafe);\n\n        // Подготавливаем данные с учетом initData\n        const shareData = {\n          userInfo: this.userInfo,\n          birthday: this.birthday,\n          initData: tg.initData,\n          chatId: tg.initDataUnsafe?.user?.id\n        };\n\n        // Генерируем уникальный ID для шаринга\n        const shareId = Math.random().toString(36).substring(2, 15);\n        const dataToSend = {\n          shareId: shareId,\n          data: shareData\n        };\n        console.log('Отправляем данные:', dataToSend);\n\n        // Проверяем готовность WebApp\n        if (!tg.isVersionAtLeast('6.1')) {\n          console.log('Версия WebApp слишком старая');\n          throw new Error('Требуется более новая версия Telegram');\n        }\n\n        // Отправляем данные через WebApp\n        const result = tg.sendData(JSON.stringify(dataToSend));\n        console.log('Результат отправки:', result);\n\n        // Ждем небольшую паузу перед показом сообщения\n        await new Promise(resolve => setTimeout(resolve, 500));\n\n        // Показываем сообщение об успешной отправке\n        tg.showPopup({\n          title: 'Отправка данных',\n          message: 'Подождите, данные отправляются в чат...',\n          buttons: [{\n            type: 'ok'\n          }]\n        });\n      } catch (error) {\n        console.error('Ошибка при отправке данных:', error);\n        tg.showPopup({\n          title: 'Ошибка',\n          message: `Не удалось отправить данные: ${error.message}`,\n          buttons: [{\n            type: 'ok'\n          }]\n        });\n      } finally {\n        this.isSharing = false;\n      }\n    }\n  },\n  mounted() {\n    if (this.isValidUserInfo) {\n      this.calculateTimeLeft();\n      this.timer = setInterval(this.calculateTimeLeft, 60000); // Обновляем каждую минуту\n    }\n  },\n  beforeDestroy() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  }\n};","map":{"version":3,"names":["name","props","userInfo","type","Object","required","birthday","String","data","timeLeft","days","hours","minutes","timer","isSharing","computed","isValidUserInfo","methods","calculateTimeLeft","now","Date","birthDate","nextBirthday","getFullYear","getMonth","getDate","setFullYear","diff","Math","floor","error","console","shareInfo","window","Telegram","WebApp","tg","log","initData","initDataUnsafe","shareData","chatId","user","id","shareId","random","toString","substring","dataToSend","isVersionAtLeast","Error","result","sendData","JSON","stringify","Promise","resolve","setTimeout","showPopup","title","message","buttons","mounted","setInterval","beforeDestroy","clearInterval"],"sources":["/Users/wiquzix/Desktop/tzrobita/src/components/UserInfo.vue"],"sourcesContent":["<template>\n  <div class=\"user-info\">\n    <div v-if=\"!isValidUserInfo\" class=\"error-message\">\n      Ошибка: данные пользователя недоступны\n    </div>\n    <div v-else class=\"user-details\">\n      <h2>Информация о пользователе</h2>\n      <div class=\"info-item\">\n        <span class=\"label\">Имя:</span>\n        <span class=\"value\">{{ userInfo.first_name }}</span>\n      </div>\n      <div class=\"info-item\">\n        <span class=\"label\">Фамилия:</span>\n        <span class=\"value\">{{ userInfo.last_name || 'Не указана' }}</span>\n      </div>\n      <div class=\"info-item\">\n        <span class=\"label\">Username:</span>\n        <span class=\"value\">@{{ userInfo.username || 'Не указан' }}</span>\n      </div>\n      <div class=\"birthday-countdown\">\n        <h3>До дня рождения осталось:</h3>\n        <div class=\"countdown-values\">\n          <div class=\"countdown-item\">\n            <span class=\"count\">{{ timeLeft.days }}</span>\n            <span class=\"unit\">дней</span>\n          </div>\n          <div class=\"countdown-item\">\n            <span class=\"count\">{{ timeLeft.hours }}</span>\n            <span class=\"unit\">часов</span>\n          </div>\n          <div class=\"countdown-item\">\n            <span class=\"count\">{{ timeLeft.minutes }}</span>\n            <span class=\"unit\">минут</span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <button \n      v-if=\"isValidUserInfo\"\n      @click=\"shareInfo\" \n      class=\"telegram-button\"\n      :disabled=\"isSharing\"\n    >\n      {{ isSharing ? 'Отправка...' : 'Поделиться' }}\n    </button>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'UserInfo',\n  props: {\n    userInfo: {\n      type: Object,\n      required: true\n    },\n    birthday: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      timeLeft: {\n        days: 0,\n        hours: 0,\n        minutes: 0\n      },\n      timer: null,\n      isSharing: false\n    }\n  },\n  computed: {\n    isValidUserInfo() {\n      return this.userInfo && typeof this.userInfo === 'object' && 'first_name' in this.userInfo;\n    }\n  },\n  methods: {\n    calculateTimeLeft() {\n      try {\n        const now = new Date()\n        const birthDate = new Date(this.birthday)\n        const nextBirthday = new Date(now.getFullYear(), birthDate.getMonth(), birthDate.getDate())\n        \n        if (nextBirthday < now) {\n          nextBirthday.setFullYear(now.getFullYear() + 1)\n        }\n        \n        const diff = nextBirthday - now\n        \n        this.timeLeft = {\n          days: Math.floor(diff / (1000 * 60 * 60 * 24)),\n          hours: Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n          minutes: Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60))\n        }\n      } catch (error) {\n        console.error('Error calculating time left:', error);\n        this.timeLeft = { days: 0, hours: 0, minutes: 0 };\n      }\n    },\n    async shareInfo() {\n      if (!window.Telegram?.WebApp) {\n        console.error('Telegram WebApp не доступен');\n        return;\n      }\n\n      const tg = window.Telegram.WebApp;\n      this.isSharing = true;\n\n      try {\n        // Проверяем initData\n        console.log('InitData:', tg.initData);\n        console.log('InitDataUnsafe:', tg.initDataUnsafe);\n\n        // Подготавливаем данные с учетом initData\n        const shareData = {\n          userInfo: this.userInfo,\n          birthday: this.birthday,\n          initData: tg.initData,\n          chatId: tg.initDataUnsafe?.user?.id\n        };\n        \n        // Генерируем уникальный ID для шаринга\n        const shareId = Math.random().toString(36).substring(2, 15);\n        \n        const dataToSend = {\n          shareId: shareId,\n          data: shareData\n        };\n\n        console.log('Отправляем данные:', dataToSend);\n\n        // Проверяем готовность WebApp\n        if (!tg.isVersionAtLeast('6.1')) {\n          console.log('Версия WebApp слишком старая');\n          throw new Error('Требуется более новая версия Telegram');\n        }\n\n        // Отправляем данные через WebApp\n        const result = tg.sendData(JSON.stringify(dataToSend));\n        console.log('Результат отправки:', result);\n\n        // Ждем небольшую паузу перед показом сообщения\n        await new Promise(resolve => setTimeout(resolve, 500));\n        \n        // Показываем сообщение об успешной отправке\n        tg.showPopup({\n          title: 'Отправка данных',\n          message: 'Подождите, данные отправляются в чат...',\n          buttons: [{\n            type: 'ok'\n          }]\n        });\n\n      } catch (error) {\n        console.error('Ошибка при отправке данных:', error);\n        tg.showPopup({\n          title: 'Ошибка',\n          message: `Не удалось отправить данные: ${error.message}`,\n          buttons: [{type: 'ok'}]\n        });\n      } finally {\n        this.isSharing = false;\n      }\n    }\n  },\n  mounted() {\n    if (this.isValidUserInfo) {\n      this.calculateTimeLeft();\n      this.timer = setInterval(this.calculateTimeLeft, 60000); // Обновляем каждую минуту\n    }\n  },\n  beforeDestroy() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  }\n}\n</script>\n\n<style scoped>\n.user-info {\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.user-details {\n  background-color: var(--tg-theme-secondary-bg-color, rgba(255, 255, 255, 0.08));\n  padding: 20px;\n  border-radius: 12px;\n}\n\n.info-item {\n  margin: 10px 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.label {\n  color: var(--tg-theme-hint-color, #999);\n}\n\n.value {\n  font-weight: bold;\n}\n\n.birthday-countdown {\n  margin-top: 20px;\n  text-align: center;\n}\n\n.countdown-values {\n  display: flex;\n  justify-content: center;\n  gap: 20px;\n  margin-top: 10px;\n}\n\n.countdown-item {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.count {\n  font-size: 24px;\n  font-weight: bold;\n  color: var(--tg-theme-button-color, #3390ec);\n}\n\n.unit {\n  font-size: 12px;\n  color: var(--tg-theme-hint-color, #999);\n}\n\n.telegram-button {\n  background-color: var(--tg-theme-button-color, #2481cc);\n  color: var(--tg-theme-button-text-color, #ffffff);\n  border: none;\n  padding: 12px 24px;\n  border-radius: 8px;\n  font-size: 16px;\n  cursor: pointer;\n  width: 100%;\n  transition: all 0.3s ease;\n}\n\n.telegram-button:active {\n  transform: scale(0.98);\n  opacity: 0.9;\n}\n\n.telegram-button:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n  transform: none;\n}\n\n.error-message {\n  color: var(--tg-theme-destructive-text-color, #ff3b30);\n  text-align: center;\n  padding: 20px;\n  background-color: var(--tg-theme-secondary-bg-color, rgba(255, 255, 255, 0.08));\n  border-radius: 8px;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}