{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'App',\n  data() {\n    return {\n      message: 'Загрузка...',\n      userInfo: null,\n      backgroundColor: '#ffffff',\n      isValidWebApp: false,\n      tg: null\n    };\n  },\n  mounted() {\n    // Проверяем, открыто ли приложение в Telegram\n    if (window.Telegram && window.Telegram.WebApp) {\n      this.tg = window.Telegram.WebApp;\n      this.isValidWebApp = true;\n\n      // Инициализация Telegram Web App\n      this.tg.ready();\n      this.tg.expand();\n\n      // Получаем информацию о пользователе\n      this.userInfo = this.tg.initDataUnsafe.user;\n\n      // Используем цвет темы из Telegram\n      this.backgroundColor = this.tg.backgroundColor;\n\n      // Загружаем данные с бэкенда\n      this.loadData();\n    }\n  },\n  methods: {\n    async loadData() {\n      try {\n        const baseURL = 'http://localhost:8000';\n        console.log('Отправка запроса к:', `${baseURL}/api/`);\n        const response = await axios.get(`${baseURL}/api/`);\n        console.log('Получен ответ:', response.data);\n        this.message = response.data.message;\n      } catch (error) {\n        console.error('Подробности ошибки:', {\n          message: error.message,\n          response: error.response,\n          request: error.request,\n          config: error.config\n        });\n        this.message = `Ошибка при загрузке данных: ${error.message}`;\n      }\n    },\n    sendDataToBot() {\n      if (this.tg) {\n        // Отправляем данные обратно в бот\n        this.tg.sendData(JSON.stringify({\n          action: 'user_clicked',\n          message: this.message\n        }));\n\n        // Показываем уведомление\n        this.tg.showPopup({\n          title: 'Успех!',\n          message: 'Данные отправлены в бот',\n          buttons: [{\n            type: 'ok'\n          }]\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","message","userInfo","backgroundColor","isValidWebApp","tg","mounted","window","Telegram","WebApp","ready","expand","initDataUnsafe","user","loadData","methods","baseURL","console","log","response","get","error","request","config","sendDataToBot","sendData","JSON","stringify","action","showPopup","title","buttons","type"],"sources":["/Users/wiquzix/Desktop/tzrobita/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\" :style=\"{ backgroundColor: backgroundColor }\">\n    <div v-if=\"!isValidWebApp\" class=\"error-message\">\n      Это приложение можно открыть только через Telegram\n    </div>\n    <div v-else>\n      <h1>{{ message }}</h1>\n      <div v-if=\"userInfo\" class=\"user-info\">\n        <p>Привет, {{ userInfo.first_name }}!</p>\n        <button \n          class=\"telegram-button\"\n          @click=\"sendDataToBot\">\n          Отправить данные в бот\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      message: 'Загрузка...',\n      userInfo: null,\n      backgroundColor: '#ffffff',\n      isValidWebApp: false,\n      tg: null\n    }\n  },\n  mounted() {\n    // Проверяем, открыто ли приложение в Telegram\n    if (window.Telegram && window.Telegram.WebApp) {\n      this.tg = window.Telegram.WebApp;\n      this.isValidWebApp = true;\n      \n      // Инициализация Telegram Web App\n      this.tg.ready();\n      this.tg.expand();\n\n      // Получаем информацию о пользователе\n      this.userInfo = this.tg.initDataUnsafe.user;\n      \n      // Используем цвет темы из Telegram\n      this.backgroundColor = this.tg.backgroundColor;\n\n      // Загружаем данные с бэкенда\n      this.loadData();\n    }\n  },\n  methods: {\n    async loadData() {\n      try {\n        const baseURL = 'http://localhost:8000';\n        console.log('Отправка запроса к:', `${baseURL}/api/`);\n        \n        const response = await axios.get(`${baseURL}/api/`);\n        console.log('Получен ответ:', response.data);\n        this.message = response.data.message;\n      } catch (error) {\n        console.error('Подробности ошибки:', {\n          message: error.message,\n          response: error.response,\n          request: error.request,\n          config: error.config\n        });\n        this.message = `Ошибка при загрузке данных: ${error.message}`;\n      }\n    },\n    sendDataToBot() {\n      if (this.tg) {\n        // Отправляем данные обратно в бот\n        this.tg.sendData(JSON.stringify({\n          action: 'user_clicked',\n          message: this.message\n        }));\n        \n        // Показываем уведомление\n        this.tg.showPopup({\n          title: 'Успех!',\n          message: 'Данные отправлены в бот',\n          buttons: [{type: 'ok'}]\n        });\n      }\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Arial, sans-serif;\n  text-align: center;\n  margin-top: 60px;\n  min-height: 100vh;\n  padding: 20px;\n}\n\n.user-info {\n  margin-top: 20px;\n  padding: 10px;\n  border-radius: 8px;\n  background-color: rgba(255, 255, 255, 0.1);\n}\n\n.error-message {\n  color: red;\n  padding: 20px;\n  text-align: center;\n}\n\n.telegram-button {\n  background-color: #3390ec;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 8px;\n  margin-top: 15px;\n  cursor: pointer;\n  font-size: 16px;\n}\n\n.telegram-button:hover {\n  background-color: #2d7fcf;\n}\n</style>\n  \n  "],"mappings":"AAoBA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,aAAa;MACtBC,QAAQ,EAAE,IAAI;MACdC,eAAe,EAAE,SAAS;MAC1BC,aAAa,EAAE,KAAK;MACpBC,EAAE,EAAE;IACN;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAIC,MAAM,CAACC,QAAO,IAAKD,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;MAC7C,IAAI,CAACJ,EAAC,GAAIE,MAAM,CAACC,QAAQ,CAACC,MAAM;MAChC,IAAI,CAACL,aAAY,GAAI,IAAI;;MAEzB;MACA,IAAI,CAACC,EAAE,CAACK,KAAK,CAAC,CAAC;MACf,IAAI,CAACL,EAAE,CAACM,MAAM,CAAC,CAAC;;MAEhB;MACA,IAAI,CAACT,QAAO,GAAI,IAAI,CAACG,EAAE,CAACO,cAAc,CAACC,IAAI;;MAE3C;MACA,IAAI,CAACV,eAAc,GAAI,IAAI,CAACE,EAAE,CAACF,eAAe;;MAE9C;MACA,IAAI,CAACW,QAAQ,CAAC,CAAC;IACjB;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,QAAQA,CAAA,EAAG;MACf,IAAI;QACF,MAAME,OAAM,GAAI,uBAAuB;QACvCC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE,GAAGF,OAAO,OAAO,CAAC;QAErD,MAAMG,QAAO,GAAI,MAAMrB,KAAK,CAACsB,GAAG,CAAC,GAAGJ,OAAO,OAAO,CAAC;QACnDC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEC,QAAQ,CAACnB,IAAI,CAAC;QAC5C,IAAI,CAACC,OAAM,GAAIkB,QAAQ,CAACnB,IAAI,CAACC,OAAO;MACtC,EAAE,OAAOoB,KAAK,EAAE;QACdJ,OAAO,CAACI,KAAK,CAAC,qBAAqB,EAAE;UACnCpB,OAAO,EAAEoB,KAAK,CAACpB,OAAO;UACtBkB,QAAQ,EAAEE,KAAK,CAACF,QAAQ;UACxBG,OAAO,EAAED,KAAK,CAACC,OAAO;UACtBC,MAAM,EAAEF,KAAK,CAACE;QAChB,CAAC,CAAC;QACF,IAAI,CAACtB,OAAM,GAAI,+BAA+BoB,KAAK,CAACpB,OAAO,EAAE;MAC/D;IACF,CAAC;IACDuB,aAAaA,CAAA,EAAG;MACd,IAAI,IAAI,CAACnB,EAAE,EAAE;QACX;QACA,IAAI,CAACA,EAAE,CAACoB,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;UAC9BC,MAAM,EAAE,cAAc;UACtB3B,OAAO,EAAE,IAAI,CAACA;QAChB,CAAC,CAAC,CAAC;;QAEH;QACA,IAAI,CAACI,EAAE,CAACwB,SAAS,CAAC;UAChBC,KAAK,EAAE,QAAQ;UACf7B,OAAO,EAAE,yBAAyB;UAClC8B,OAAO,EAAE,CAAC;YAACC,IAAI,EAAE;UAAI,CAAC;QACxB,CAAC,CAAC;MACJ;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}