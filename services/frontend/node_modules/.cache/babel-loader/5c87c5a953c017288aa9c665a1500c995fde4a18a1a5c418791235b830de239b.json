{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"error-message\"\n};\nconst _hoisted_2 = {\n  key: 1\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"user-info\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    id: \"app\",\n    style: _normalizeStyle({\n      backgroundColor: $data.backgroundColor\n    })\n  }, [!$data.isValidWebApp ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, \" Это приложение можно открыть только через Telegram \")) : (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"h1\", null, _toDisplayString($data.message), 1 /* TEXT */), $data.userInfo ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"p\", null, \"Привет, \" + _toDisplayString($data.userInfo.first_name) + \"!\", 1 /* TEXT */), _createElementVNode(\"button\", {\n    class: \"telegram-button\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.sendDataToBot && $options.sendDataToBot(...args))\n  }, \" Отправить данные в бот \")])) : _createCommentVNode(\"v-if\", true)]))], 4 /* STYLE */);\n}","map":{"version":3,"names":["key","class","_createElementBlock","id","style","_normalizeStyle","backgroundColor","$data","isValidWebApp","_hoisted_1","_hoisted_2","_createElementVNode","_toDisplayString","message","userInfo","_hoisted_3","first_name","onClick","_cache","args","$options","sendDataToBot","_createCommentVNode"],"sources":["/Users/wiquzix/Desktop/tzrobita/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\" :style=\"{ backgroundColor: backgroundColor }\">\n    <div v-if=\"!isValidWebApp\" class=\"error-message\">\n      Это приложение можно открыть только через Telegram\n    </div>\n    <div v-else>\n      <h1>{{ message }}</h1>\n      <div v-if=\"userInfo\" class=\"user-info\">\n        <p>Привет, {{ userInfo.first_name }}!</p>\n        <button \n          class=\"telegram-button\"\n          @click=\"sendDataToBot\">\n          Отправить данные в бот\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      message: 'Загрузка...',\n      userInfo: null,\n      backgroundColor: '#ffffff',\n      isValidWebApp: false,\n      tg: null\n    }\n  },\n  mounted() {\n    // Проверяем, открыто ли приложение в Telegram\n    if (window.Telegram && window.Telegram.WebApp) {\n      this.tg = window.Telegram.WebApp;\n      this.isValidWebApp = true;\n      \n      // Инициализация Telegram Web App\n      this.tg.ready();\n      this.tg.expand();\n\n      // Получаем информацию о пользователе\n      this.userInfo = this.tg.initDataUnsafe.user;\n      \n      // Используем цвет темы из Telegram\n      this.backgroundColor = this.tg.backgroundColor;\n\n      // Загружаем данные с бэкенда\n      this.loadData();\n    }\n  },\n  methods: {\n    async loadData() {\n      try {\n        const baseURL = 'http://localhost:8000';\n        console.log('Отправка запроса к:', `${baseURL}/api/`);\n        \n        const response = await axios.get(`${baseURL}/api/`);\n        console.log('Получен ответ:', response.data);\n        this.message = response.data.message;\n      } catch (error) {\n        console.error('Подробности ошибки:', {\n          message: error.message,\n          response: error.response,\n          request: error.request,\n          config: error.config\n        });\n        this.message = `Ошибка при загрузке данных: ${error.message}`;\n      }\n    },\n    sendDataToBot() {\n      if (this.tg) {\n        // Отправляем данные обратно в бот\n        this.tg.sendData(JSON.stringify({\n          action: 'user_clicked',\n          message: this.message\n        }));\n        \n        // Показываем уведомление\n        this.tg.showPopup({\n          title: 'Успех!',\n          message: 'Данные отправлены в бот',\n          buttons: [{type: 'ok'}]\n        });\n      }\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Arial, sans-serif;\n  text-align: center;\n  margin-top: 60px;\n  min-height: 100vh;\n  padding: 20px;\n}\n\n.user-info {\n  margin-top: 20px;\n  padding: 10px;\n  border-radius: 8px;\n  background-color: rgba(255, 255, 255, 0.1);\n}\n\n.error-message {\n  color: red;\n  padding: 20px;\n  text-align: center;\n}\n\n.telegram-button {\n  background-color: #3390ec;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 8px;\n  margin-top: 15px;\n  cursor: pointer;\n  font-size: 16px;\n}\n\n.telegram-button:hover {\n  background-color: #2d7fcf;\n}\n</style>\n  \n  "],"mappings":";;EAAAA,GAAA;EAE+BC,KAAK,EAAC;;;EAFrCD,GAAA;AAAA;;EAAAA,GAAA;EAO2BC,KAAK,EAAC;;;uBAN/BC,mBAAA,CAeM;IAfDC,EAAE,EAAC,KAAK;IAAEC,KAAK,EADtBC,eAAA;MAAAC,eAAA,EAC2CC,KAAA,CAAAD;IAAe;OAC1CC,KAAA,CAAAC,aAAa,I,cAAzBN,mBAAA,CAEM,OAFNO,UAEM,EAF2C,sDAEjD,M,cACAP,mBAAA,CAUM,OAfVQ,UAAA,GAMMC,mBAAA,CAAsB,YAAAC,gBAAA,CAAfL,KAAA,CAAAM,OAAO,kBACHN,KAAA,CAAAO,QAAQ,I,cAAnBZ,mBAAA,CAOM,OAPNa,UAOM,GANJJ,mBAAA,CAAyC,WAAtC,UAAQ,GAAAC,gBAAA,CAAGL,KAAA,CAAAO,QAAQ,CAACE,UAAU,IAAG,GAAC,iBACrCL,mBAAA,CAIS;IAHPV,KAAK,EAAC,iBAAiB;IACtBgB,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;KAAE,0BAEzB,E,KAbRG,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}