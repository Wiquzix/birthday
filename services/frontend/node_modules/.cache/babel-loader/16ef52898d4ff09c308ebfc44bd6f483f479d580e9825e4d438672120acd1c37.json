{"ast":null,"code":"export default {\n  name: 'UserInfo',\n  props: {\n    userInfo: {\n      type: Object,\n      required: true\n    },\n    birthday: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      timeLeft: {\n        days: 0,\n        hours: 0,\n        minutes: 0\n      },\n      timer: null\n    };\n  },\n  computed: {\n    isValidUserInfo() {\n      return this.userInfo && typeof this.userInfo === 'object' && 'first_name' in this.userInfo;\n    }\n  },\n  methods: {\n    calculateTimeLeft() {\n      try {\n        const now = new Date();\n        const birthDate = new Date(this.birthday);\n        const nextBirthday = new Date(now.getFullYear(), birthDate.getMonth(), birthDate.getDate());\n        if (nextBirthday < now) {\n          nextBirthday.setFullYear(now.getFullYear() + 1);\n        }\n        const diff = nextBirthday - now;\n        this.timeLeft = {\n          days: Math.floor(diff / (1000 * 60 * 60 * 24)),\n          hours: Math.floor(diff % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)),\n          minutes: Math.floor(diff % (1000 * 60 * 60) / (1000 * 60))\n        };\n      } catch (error) {\n        console.error('Error calculating time left:', error);\n        this.timeLeft = {\n          days: 0,\n          hours: 0,\n          minutes: 0\n        };\n      }\n    },\n    async shareInfo() {\n      try {\n        const shareData = {\n          userInfo: this.userInfo,\n          birthday: this.birthday\n        };\n        // Генерируем уникальный ID для шаринга\n        const shareId = Math.random().toString(36).substring(2, 15);\n\n        // Отправляем данные в бот без сохранения на бэкенде\n        if (window.Telegram && window.Telegram.WebApp) {\n          window.Telegram.WebApp.sendData(JSON.stringify({\n            action: 'share',\n            shareId,\n            data: shareData\n          }));\n\n          // Показываем уведомление об успехе\n          window.Telegram.WebApp.showPopup({\n            title: 'Успешно!',\n            message: 'Ссылка для шаринга будет отправлена в чат',\n            buttons: [{\n              type: 'ok'\n            }]\n          });\n        }\n      } catch (error) {\n        console.error('Error sharing data:', error);\n        if (window.Telegram && window.Telegram.WebApp) {\n          window.Telegram.WebApp.showPopup({\n            title: 'Ошибка',\n            message: 'Не удалось поделиться данными',\n            buttons: [{\n              type: 'ok'\n            }]\n          });\n        }\n      }\n    }\n  },\n  mounted() {\n    if (this.isValidUserInfo) {\n      this.calculateTimeLeft();\n      this.timer = setInterval(this.calculateTimeLeft, 60000); // Обновляем каждую минуту\n    }\n  },\n  beforeDestroy() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  }\n};","map":{"version":3,"names":["name","props","userInfo","type","Object","required","birthday","String","data","timeLeft","days","hours","minutes","timer","computed","isValidUserInfo","methods","calculateTimeLeft","now","Date","birthDate","nextBirthday","getFullYear","getMonth","getDate","setFullYear","diff","Math","floor","error","console","shareInfo","shareData","shareId","random","toString","substring","window","Telegram","WebApp","sendData","JSON","stringify","action","showPopup","title","message","buttons","mounted","setInterval","beforeDestroy","clearInterval"],"sources":["/Users/wiquzix/Desktop/tzrobita/src/components/UserInfo.vue"],"sourcesContent":["<template>\n  <div class=\"user-info\">\n    <div v-if=\"!isValidUserInfo\" class=\"error-message\">\n      Ошибка: данные пользователя недоступны\n    </div>\n    <div v-else class=\"user-details\">\n      <h2>Информация о пользователе</h2>\n      <div class=\"info-item\">\n        <span class=\"label\">Имя:</span>\n        <span class=\"value\">{{ userInfo.first_name }}</span>\n      </div>\n      <div class=\"info-item\">\n        <span class=\"label\">Фамилия:</span>\n        <span class=\"value\">{{ userInfo.last_name || 'Не указана' }}</span>\n      </div>\n      <div class=\"info-item\">\n        <span class=\"label\">Username:</span>\n        <span class=\"value\">@{{ userInfo.username || 'Не указан' }}</span>\n      </div>\n      <div class=\"birthday-countdown\">\n        <h3>До дня рождения осталось:</h3>\n        <div class=\"countdown-values\">\n          <div class=\"countdown-item\">\n            <span class=\"count\">{{ timeLeft.days }}</span>\n            <span class=\"unit\">дней</span>\n          </div>\n          <div class=\"countdown-item\">\n            <span class=\"count\">{{ timeLeft.hours }}</span>\n            <span class=\"unit\">часов</span>\n          </div>\n          <div class=\"countdown-item\">\n            <span class=\"count\">{{ timeLeft.minutes }}</span>\n            <span class=\"unit\">минут</span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <button \n      v-if=\"isValidUserInfo\"\n      @click=\"shareInfo\" \n      class=\"telegram-button\"\n    >\n      Поделиться\n    </button>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'UserInfo',\n  props: {\n    userInfo: {\n      type: Object,\n      required: true\n    },\n    birthday: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      timeLeft: {\n        days: 0,\n        hours: 0,\n        minutes: 0\n      },\n      timer: null\n    }\n  },\n  computed: {\n    isValidUserInfo() {\n      return this.userInfo && typeof this.userInfo === 'object' && 'first_name' in this.userInfo;\n    }\n  },\n  methods: {\n    calculateTimeLeft() {\n      try {\n        const now = new Date()\n        const birthDate = new Date(this.birthday)\n        const nextBirthday = new Date(now.getFullYear(), birthDate.getMonth(), birthDate.getDate())\n        \n        if (nextBirthday < now) {\n          nextBirthday.setFullYear(now.getFullYear() + 1)\n        }\n        \n        const diff = nextBirthday - now\n        \n        this.timeLeft = {\n          days: Math.floor(diff / (1000 * 60 * 60 * 24)),\n          hours: Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n          minutes: Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60))\n        }\n      } catch (error) {\n        console.error('Error calculating time left:', error);\n        this.timeLeft = { days: 0, hours: 0, minutes: 0 };\n      }\n    },\n    async shareInfo() {\n      try {\n        const shareData = {\n          userInfo: this.userInfo,\n          birthday: this.birthday\n        }\n        // Генерируем уникальный ID для шаринга\n        const shareId = Math.random().toString(36).substring(2, 15)\n        \n        // Отправляем данные в бот без сохранения на бэкенде\n        if (window.Telegram && window.Telegram.WebApp) {\n          window.Telegram.WebApp.sendData(JSON.stringify({\n            action: 'share',\n            shareId,\n            data: shareData\n          }));\n          \n          // Показываем уведомление об успехе\n          window.Telegram.WebApp.showPopup({\n            title: 'Успешно!',\n            message: 'Ссылка для шаринга будет отправлена в чат',\n            buttons: [{type: 'ok'}]\n          });\n        }\n      } catch (error) {\n        console.error('Error sharing data:', error);\n        if (window.Telegram && window.Telegram.WebApp) {\n          window.Telegram.WebApp.showPopup({\n            title: 'Ошибка',\n            message: 'Не удалось поделиться данными',\n            buttons: [{type: 'ok'}]\n          });\n        }\n      }\n    }\n  },\n  mounted() {\n    if (this.isValidUserInfo) {\n      this.calculateTimeLeft()\n      this.timer = setInterval(this.calculateTimeLeft, 60000) // Обновляем каждую минуту\n    }\n  },\n  beforeDestroy() {\n    if (this.timer) {\n      clearInterval(this.timer)\n    }\n  }\n}\n</script>\n\n<style scoped>\n.user-info {\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.user-details {\n  background-color: var(--tg-theme-secondary-bg-color, rgba(255, 255, 255, 0.08));\n  padding: 20px;\n  border-radius: 12px;\n}\n\n.info-item {\n  margin: 10px 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.label {\n  color: var(--tg-theme-hint-color, #999);\n}\n\n.value {\n  font-weight: bold;\n}\n\n.birthday-countdown {\n  margin-top: 20px;\n  text-align: center;\n}\n\n.countdown-values {\n  display: flex;\n  justify-content: center;\n  gap: 20px;\n  margin-top: 10px;\n}\n\n.countdown-item {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.count {\n  font-size: 24px;\n  font-weight: bold;\n  color: var(--tg-theme-button-color, #3390ec);\n}\n\n.unit {\n  font-size: 12px;\n  color: var(--tg-theme-hint-color, #999);\n}\n\n.telegram-button {\n  background-color: var(--tg-theme-button-color, #3390ec);\n  color: var(--tg-theme-button-text-color, #ffffff);\n  border: none;\n  padding: 12px 24px;\n  border-radius: 8px;\n  font-size: 16px;\n  cursor: pointer;\n  width: 100%;\n}\n\n.error-message {\n  color: var(--tg-theme-destructive-text-color, #ff3b30);\n  text-align: center;\n  padding: 20px;\n  background-color: var(--tg-theme-secondary-bg-color, rgba(255, 255, 255, 0.08));\n  border-radius: 8px;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}